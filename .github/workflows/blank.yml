name: CI and Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm install

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K[^"]*')" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Set up Docker Compose
        run: |
          docker-compose up -d db

      - name: Wait for the database to be ready
        run: |
          until docker exec $(docker ps -qf "name=db") pg_isready -U catalogbot_user; do
            echo "Waiting for the database to be ready..."
            sleep 3
          done

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Start migration process
        run: npx prisma migrate deploy

      - name: Build the project
        run: npm run build

      - name: Lint the project (optional)
        run: npm run lint

      - name: Build Docker image
        run: |
          docker-compose build app

      - name: Save Docker image
        run: |
          docker save catalog_bot_api | bzip2 > catalog_bot_api.tar.bz2

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: catalog_bot_api.tar.bz2

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy Docker image to server
        run: |
          scp -o StrictHostKeyChecking=no catalog_bot_api.tar.bz2 narmatoff@31.128.38.77:~/catalog-bot/

      - name: Deploy Docker image to server
        run: |
          ssh -o StrictHostKeyChecking=no narmatoff@31.128.38.77 << 'EOF'
          cd ~/catalog-bot
          bunzip2 < catalog_bot_api.tar.bz2 | docker load

          # Создание сети, если она не существует
          docker network ls | grep catalog_bot_network || docker network create catalog_bot_network

          # Остановка и удаление существующего контейнера базы данных, если он есть
          docker stop catalog_bot_db || true
          docker rm catalog_bot_db || true

          # Запуск контейнера базы данных
          docker run -d --restart=always \
            --name catalog_bot_db \
            --network catalog_bot_network \
            -e POSTGRES_USER=catalogbot_user \
            -e POSTGRES_PASSWORD=catalogbot_password \
            -e PGDATA=/var/lib/postgresql/data/pgdata \
            -v ~/docker/postgresql/data:/var/lib/postgresql/data \
            -p 5432:5432 \
            postgres:16.4

          # Остановка и удаление существующего контейнера приложения, если он есть
          docker stop catalog_bot_api || true
          docker rm catalog_bot_api || true

          # Запуск контейнера приложения
          docker run -d --restart=always \
            --name catalog_bot_api \
            --network catalog_bot_network \
            -p 3001:3001 \
            -e DATABASE_URL=postgresql://catalogbot_user:catalogbot_password@catalog_bot_db:5432/postgres \
            catalog_bot_api
          EOF
