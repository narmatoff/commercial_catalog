// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //TODO: после тестирования api задействовать id в качестве uuid пользователя телеграм
  id         Int      @id @default(autoincrement())
  telegramId Int      @unique
  email      String   @unique
  fio        String
  phone      String   @unique
  isAdult    Boolean
  basket     Basket? // Связь с корзиной (1:1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  prodId       Int            @unique
  name         String
  vendorCode   String
  vendorId     Int
  infoPrice    Float
  description  String
  batteries    String?
  pack         String
  material     String
  length       Float?
  diameter     Float?
  collection   String?
  img1         String?
  img2         String?
  img3         String?
  img4         String?
  img5         String?
  img6         String?
  img7         String?
  img8         String?
  img9         String?
  img10        String?
  categoryId   Int
  isNew        Boolean        @default(false)
  isBestseller Boolean        @default(false)
  function     String?
  addFunction  String?
  vibration    String?
  volume       String?
  modelYear    Int?
  imgStatus    Boolean        @default(false)
  BasketItem   BasketItem[]
  offers       ProductOffer[]
  category     Catalog?       @relation(fields: [categoryId], references: [categoryId]) // Связь через categoryId
}

model ProductOffer {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prodId         Int
  sku            Int          @unique
  barcode        String
  name           String
  price          Float
  WholePrice     Float
  basewholeprice Float
  qty            Int
  shippingdate   String?
  weight         Float?
  colorName      String
  color          String
  size           String?
  SuperSale      Boolean?
  p5s_stock      Boolean      @default(false)
  StopPromo      Boolean      @default(false)
  bruttoLength   Float?
  bruttoWidth    Float?
  bruttoHeight   Float?
  currency       EnumCurrency @default(RUB)
  product        Product      @relation(fields: [prodId], references: [prodId])
  prodColor      ProductColor @relation(fields: [color], references: [color])
}

enum EnumCurrency {
  USD
  EUR
  RUB
}

model ProductColor {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  colorName    String
  color        String         @unique
  colorUrl     String
  ProductOffer ProductOffer[]
}

model Catalog {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId Int?      @unique
  parentId   Int?
  name       String
  sort       Int
  products   Product[] // Связь с Product через categoryId
}

model Basket {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  telegramId Int          @unique
  user       User         @relation(fields: [telegramId], references: [telegramId]) // Связь с пользователем (1:1)
  items      BasketItem[]
}

model BasketItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  basketId  Int
  basket    Basket   @relation(fields: [basketId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1) // количество товара
}
