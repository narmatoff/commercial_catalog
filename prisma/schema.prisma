// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //TODO: после тестирования api задействовать id в качестве uuid пользователя телеграм
  id         Int      @id @default(autoincrement())
  telegramId Int      @unique
  email      String?  @unique
  name       String?
  basket     Basket? // Связь с корзиной (1:1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  prodId       Int            @unique
  name         String
  vendorCode   String
  vendorId     Int
  infoPrice    Float
  description  String
  batteries    String?
  pack         String
  material     String
  length       Float?
  diameter     Float?
  collection   String?
  img1         String?
  img2         String?
  img3         String?
  img4         String?
  img5         String?
  img6         String?
  img7         String?
  img8         String?
  img9         String?
  img10        String?
  categoryId   Int
  isNew        Boolean
  isBestseller Boolean
  function     String?
  addFunction  String?
  vibration    String?
  volume       String?
  modelYear    Int?
  imgStatus    Boolean
  lefts        Int            @default(0)
  BasketItem   BasketItem[]
  offers       ProductOffers?
}

model ProductOffers {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prodId         Int          @unique
  sku            Int
  barcode        String
  name           String
  price          Float
  WholePrice     Float
  basewholeprice Float
  qty            Int
  shippingdate   String?
  weight         Float?
  colorName      String
  color          String
  size           String?
  SuperSale      Boolean?
  p5s_stock      Boolean
  StopPromo      Boolean
  bruttoLength   Float?
  bruttoWidth    Float?
  bruttoHeight   Float?
  currency       EnumCurrency @default(RUB)
  product        Product      @relation(fields: [prodId], references: [prodId]) // Связь с Product
}

enum EnumCurrency {
  USD
  EUR
  RUB
}

model ProductColors {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  colorName String
  color     EnumColors
  colorUrl  String
}

enum EnumColors {
  chernyj
  leopard
  ne_zadano
  krasnyj
  fioletovyj
  rozovyj
  serebro
  chernyj_s_serebristym
  serebristyj
  krasnyj_s_chernym
  chernyj_s_krasnym
  serebristyj_s_chernym
  belyj
  belyj_s_krasnym
  cvet_ne_ukazan
  rozovyj_s_chernym
  fioletovyj_s_chernym
  zoloto
  korichnevyj
  goluboj
  bronzovyj
  sinij_s_chernym
  prozrachnyj
  chernyj_s_belym
  malinovyj
  chernyj_s_sinim
  chernyj_s_rozovym
  malinovyj_s_chyornym
  chernyj_s_bezhevym
  bezhevyj
  tigrovyj
  belyj_s_chernym
  oranzhevyj
  zolotistyj_s_chernym
  bordovyj
  izumrudnyj
  zolotistyj
  chernyj_s_zolotistym
  sinij
  zelenyj
  goluboj_s_chernym
  chernyj_s_leopardovym
  chernyj_s_golubym
  chernyj_s_zelenym
  zelenyj_s_chernym
  telesnyj
  sirenevyj
  raznocvetnyj
  zheltyj
  lajmovyj
  salatovyj
  lilovyj
  kremovyj
  dymchatyj
  seryj
  belyj_s_zolotym
  kofejnyj
  belyj_s_zheltym
  persikovyj
  biryuzovyj
  slivovyj
  akvamarinovyj
  molochnyj
  krasnyj_s_belym
  rozovyj_s_belym
  sinij_s_belym
  myatnyj
  fioletovyj_s_rozovym
  belyj_s_golubym
  belyj_s_rozovym
  chernyj_s_korallovym
  pudrovyj
  zelenyj_s_belym
  korallovyj
  chernyj_s_zolotym
  zheltyj_s_sinim
  fioletovyj_s_belym
  bezhevyj_s_rozovym
  seryj_s_persikovym
  sinij_s_oranzhevym
  goluboj_s_belym
  sinij_s_krasnym
  chernyj_s_serym
  sinij_s_rozovym
  belyj_s_sinim
  telesnyj_s_chernym
  chernyj_s_fioletovym
  belyj_s_serebristym
  bezhevyj_s_krasnym
  belyj_s_bezhevym
  zelenyj_kamuflyazh
  chernyj_s_zheltym
  bezhevyj_s_chernym
  chernaya_shotlandka
  rozovyj_leopard
  krasnyj_s_bezhevym
  kakao
  chernyj_s_malinovym
  krasnaya_shotlandka
  haki
  sinij_s_golubym
  seryj_s_rozovym
  chernyj_s_oranzhevym
  olivkovyj
  terrakotovyj
  rozovyj_s_sinim
  seryj_s_chyornym
  rozovyj_s_krasnym
  krasnyj_s_sinim
  sinij_s_sirenevym
  rozovyj_s_oranzhevym
  rozovaya_shotlandka
  goluboj_s_rozovym
  seryj_leopard
  goluboj_leopard
  telesnyj_s_rozovym
  sinyaya_shotlandka
  seryj_s_bezhevym
  belyj_s_zelenym
  goluboj_s_sinim
  zebra
  chernyj_s_lajmovym
  persikovyj_s_chernym
  krasnyj_s_serym
  belyj_s_serym
  bezhevyj_s_belym
  biryuzovyj_s_chernym
  sinij_kamuflyazh
  goluboj_s_zelenym
  kremovyj_s_chernym
  belyj_s_zolotistym
  seryj_melanzh
  seryj_s_zhyoltym
  seryj_s_golubym
  seryj_s_belym
  seryj_s_sinim
  sinij_s_serym
  oranzhevyj_s_chernym
  sinij_melanzh
  zelenaya_shotlandka
  bezhevyj_s_golubym
  bezhevyj_melanzh
  rozovyj_melanzh
  rozovyj_s_serym
  kofejnyj_s_chernym
  mokryj_asfalt
  sinij_s_zheltym
  sinij_s_zelenym
}

model Catalog {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId Int?
  parentId   Int?
  name       String
  sort       Int
}

model Basket {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  telegramId Int          @unique
  user       User         @relation(fields: [telegramId], references: [telegramId]) // Связь с пользователем (1:1)
  items      BasketItem[]
}

model BasketItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  basketId  Int
  basket    Basket   @relation(fields: [basketId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1) // количество товара
}
